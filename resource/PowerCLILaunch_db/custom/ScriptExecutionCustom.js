
const app = require('../../../app.js');
const db_PowerCLILaunch_db = require('../../../db/PowerCLILaunch_db_schema.js');
const logger = require('../../../logger.js');
const handleError = require('../../../security/util.js').handleError;
const properties = require('../../../properties.js');


// start documentation
/*
 * SCHEMA DB ScriptExecution
 * 
	{
		Filename: {
			type: 'String', 
			required : true
		},
		HasResults: {
			type: 'String'
		},
		ResultType: {
			type: 'String'
		},
		State: {
			type: 'String'
		},
		TimeEnd: {
			type: 'Date'
		},
		TimeStart: {
			type: 'Date'
		},
		TimeUpdate: {
			type: 'Date'
		},
		//RELATIONS
		
		
		//EXTERNAL RELATIONS
		
		ScriptExecution: {
			type: Schema.ObjectId,
			ref : "Result"
		},
		
	}
 * 
 * 
 * 
 * Custom APIs
 *
 * Service.Launch
 *	@param String id
 *	@returns Boolean
 *
 * Service.adddefault
 *	@description Add default script
 *	@returns Boolean
 *
 */
// end documentation

// INSERT HERE YOURS CUSTOM METHODS

const { spawn } = require('child_process');

var DbUtils = {
	insertResultsFromScript: function(sId, sName, sValue, oCallback){
		oResult = {
			Name:sName,
			Value:sValue,
			ScriptExecution: sId
		};	
		
		var oRes = db_PowerCLILaunch_db.Result(oResult);
		oRes.save(function(err){
			if (err){
				console.log(err);
			}
			
			oCallback();
		});
		
	}

}


/**
 * ScriptExecutionService.Launch
 *
 */
app['get'](properties.api + '/scriptexecutions/launch/:id', function(req, res){
	
	
	// Return variable
	var bReturn = false;
	
	// get the data based on id
	db_PowerCLILaunch_db.ScriptExecution.findOne({_id:req.params.id}).exec(function(err, obj){
		
		var oExecutionData = obj;
		var sData = ""; // Store data from script 
		
		if (err) return handleError(err, res);
		
		if (obj.State.indexOf("Running") > -1){
			console.log("Already running");
			
		}else{
			
			// Finally launch script async
			var bat = spawn('/usr/bin/pwsh', ['/app/pcli/'+oExecutionData.Filename]);
			
			//Unique process id generated by epoc
			var iProcessRun = (new Date).getTime();
			oExecutionData.State = "Running-"+iProcessRun;
			
			// Purge old data
			db_PowerCLILaunch_db.Result.remove({ScriptExecution:oExecutionData._id},function(err){
				if (err){
					console.log(err);
				}
				
				oExecutionData.HasResults = "";
				db_PowerCLILaunch_db.ScriptExecution.findByIdAndUpdate(oExecutionData._id, oExecutionData, {'new': true}, function(err, obj){
					if (err){
						console.log(err);
					}
				});
			});
			
			
				
			console.log("Start Script with process" + iProcessRun );
			
			bat.stdout.on('data', (data) => {
				
				console.log("incoming data " + iProcessRun);
				//console.log(data.toString());	
				sData += data.toString();
				
				
				oExecutionData.HasResults = "Data";
				db_PowerCLILaunch_db.ScriptExecution.findByIdAndUpdate(oExecutionData._id, oExecutionData, {'new': true}, function(err, obj){
					if (err){
						console.log(err);
					}
					
				});
				
			});	
				
			bat.stderr.on('data', (data) => {
				console.log("Error" + iProcessRun);
			
				
				// Write error into results 
				oExecutionData.HasResults = "Error";
				var oResultErr = {
					Name:'error',
					Value: data.toString(),
					//EXTERNAL RELATIONS
					ScriptExecution: oExecutionData._id
				};
				var oErr = db_PowerCLILaunch_db.Result(oResultErr);
				oErr.save(function(err){
					if (err){
						console.log(err);
					}
					db_PowerCLILaunch_db.ScriptExecution.findByIdAndUpdate(oExecutionData._id, oExecutionData, {'new': true}, function(err, obj){
						if (err){
							console.log(err);
						}
					});
					
				});
				
				
				
			});
			
			bat.on('exit', (code) => {
				
				console.log("End of script" + iProcessRun);	
				console.log (sData);
				
				oExecutionData.State = "End";
				db_PowerCLILaunch_db.ScriptExecution.findByIdAndUpdate(oExecutionData._id, oExecutionData, {'new': true}, function(err, obj){
					if (err){
						console.log(err);
					}
					
					if (sData != ""){
						// Finally store data
						var oData = JSON.parse(sData);
						
						var oResData = JSON.parse(oExecutionData.ResultType);
					
						if (oResData.type == "list"){
							for (var i=0; i < oData.length; i++){
								
								
								DbUtils.insertResultsFromScript(oExecutionData._id, oResData.name, JSON.stringify(oData[i]),function(){
									// Done
								});
								
							}
						}else if (oResData.type == "single"){
							
							DbUtils.insertResultsFromScript(oExecutionData._id, oResData.name, JSON.stringify(oData),function(){
								// Done
							});
							
						}
					}
				});
				
			});
			
			bReturn = true;
			
		}
		res.send(bReturn);
	});
	
});

/**
 * ScriptExecutionService.AddDefault
 *
 */
app['get'](properties.api + '/scriptexecutionsadddefault', function(req, res){
	db_PowerCLILaunch_db.ScriptExecution.findOne({Filename:"test.ps1"}).count().exec (function( err, count){
		if (count == 0){
			var oScriptDefault = new db_PowerCLILaunch_db.ScriptExecution({
				Filename: "test.ps1",
				ResultType: "{\"type\":\"list\",\"name\":\"vm\"}",
				State: "Ready",
			});
			oScriptDefault.save(function(err) {
				if (err){
					console.log("Error" +err);
					res.send(false);
				}else{
					console.log("Inser new default script");
					res.send(true);
				};
				
            });
		}else{
			console.log("Already present");
			res.send(true);
		}
	});
	
});